// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template integration tests using the generator avro schemas should appear in a package based on their namespace, if any. 1`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {

	public User () {
	}

	public User (
		String displayName, 
		String email, 
		Integer age) {
		this.displayName = displayName;
		this.email = email;
		this.age = age;
	}

	private String displayName;
	private String email;
	private Integer age;
	public String getDisplayName() {
		return displayName;
	}

	public User setDisplayName(String displayName) {
		this.displayName = displayName;
		return this;
	}


	public String getEmail() {
		return email;
	}

	public User setEmail(String email) {
		this.email = email;
		return this;
	}


	public Integer getAge() {
		return age;
	}

	public User setAge(Integer age) {
		this.age = age;
		return this;
	}

	public String toString() {
		return \\"User [\\"
		+ \\" displayName: \\" + displayName
		+ \\" email: \\" + email
		+ \\" age: \\" + age
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator avro schemas should appear in a package based on their namespace, if any. 2`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {

	public User () {
	}

	public User (
		String displayName, 
		String email, 
		Integer age) {
		this.displayName = displayName;
		this.email = email;
		this.age = age;
	}

	private String displayName;
	private String email;
	private Integer age;
	public String getDisplayName() {
		return displayName;
	}

	public User setDisplayName(String displayName) {
		this.displayName = displayName;
		return this;
	}


	public String getEmail() {
		return email;
	}

	public User setEmail(String email) {
		this.email = email;
		return this;
	}


	public Integer getAge() {
		return age;
	}

	public User setAge(Integer age) {
		this.age = age;
		return this;
	}

	public String toString() {
		return \\"User [\\"
		+ \\" displayName: \\" + displayName
		+ \\" email: \\" + email
		+ \\" age: \\" + age
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate a comment for a consumer receiving multiple messages 1`] = `
"
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	// The message can be of type:
	// Cat
	// Dog
	@Bean
	public Supplier<Message<?>> animalsSupplier() {
		return () -> {
			// Add business logic here.
			return new Message<?>();
		};
	}

	// The message can be of type:
	// Cat
	// Dog
	@Bean
	public Consumer<Message<?>> animalsConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

}
"
`;

exports[`template integration tests using the generator should generate a model subclass when it sees an allOf 1`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;






@JsonInclude(JsonInclude.Include.NON_NULL)
public class ExtendedErrorModel extends ErrorModel {

	public ExtendedErrorModel () {
	}

	public ExtendedErrorModel (
		String rootCause) {
		this.rootCause = rootCause;
	}

	private String rootCause;
	public String getRootCause() {
		return rootCause;
	}

	public ExtendedErrorModel setRootCause(String rootCause) {
		this.rootCause = rootCause;
		return this;
	}

	public String toString() {
		return \\"ExtendedErrorModel [\\"
		+ \\" rootCause: \\" + rootCause
		+ \\" super: \\" + super.toString()
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.company</groupId>
    <artifactId>asyncApiFileName</artifactId>
    <version>0.0.1</version>
    <packaging>jar</packaging>
    <name>asyncApiFileName</name>
    <description>Auto-generated Spring Cloud Stream AsyncAPI application</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.7</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <spring-cloud.version>2020.0.3</spring-cloud.version>
        <solace-spring-cloud-bom.version>2.1.0</solace-spring-cloud-bom.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>\${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.solace.spring.cloud</groupId>
                <artifactId>solace-spring-cloud-bom</artifactId>
                <version>\${solace-spring-cloud-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.solace.spring.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-solace</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 2`] = `
"# solace-test-app

## Version 0.0.1



"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 3`] = `
"package com.acme;

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	@Bean
	public Consumer<MySchema> testLevel1MessageIdOperationConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	public void sendTestLevel1MessageIdOperation(
		MySchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 4`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class MySchema {

	public MySchema () {
	}

	public MySchema (
		String prop1, 
		String _long) {
		this.prop1 = prop1;
		this._long = _long;
	}

	private String prop1;
	@JsonProperty(\\"long\\")
	private String _long;
	public String getProp1() {
		return prop1;
	}

	public MySchema setProp1(String prop1) {
		this.prop1 = prop1;
		return this;
	}


	public String getLong() {
		return _long;
	}

	public MySchema setLong(String _long) {
		this._long = _long;
		return this;
	}

	public String toString() {
		return \\"MySchema [\\"
		+ \\" prop1: \\" + prop1
		+ \\" _long: \\" + _long
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 5`] = `
"spring:
  cloud:
    function:
      definition: testLevel1MessageIdOperationSupplier;testLevel1MessageIdOperationConsumer
    stream:
      bindings:
        testLevel1MessageIdOperationSupplier-out-0:
          destination: 'testLevel1/{messageId}/{operation}'
        testLevel1MessageIdOperationConsumer-in-0:
          destination: testLevel1/*/*
      binders:
        solace-binder:
          type: solace
          environment:
            solace:
              java:
                host: testVmrUri
                msgVpn: vpnName
                clientUsername: user
                clientPassword: test
logging:
  level:
    root: info
    org:
      springframework: info

"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 1`] = `
"
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Consumer<LightMeasuredPayload> receiveLightMeasurement() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}




	public void sendTurnOn(
		TurnOnOffPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/turn/on\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
	public void sendTurnOff(
		TurnOnOffPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/turn/off\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
	public void sendDimLight(
		DimLightPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/dim\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 2`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class DimLightPayload {

	public DimLightPayload () {
	}

	public DimLightPayload (
		Integer percentage, 
		SentAt sentAt) {
		this.percentage = percentage;
		this.sentAt = sentAt;
	}

	private Integer percentage;
	private SentAt sentAt;
	public Integer getPercentage() {
		return percentage;
	}

	public DimLightPayload setPercentage(Integer percentage) {
		this.percentage = percentage;
		return this;
	}


	public SentAt getSentAt() {
		return sentAt;
	}

	public DimLightPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"DimLightPayload [\\"
		+ \\" percentage: \\" + percentage
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 3`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class LightMeasuredPayload {

	public LightMeasuredPayload () {
	}

	public LightMeasuredPayload (
		Integer lumens, 
		SentAt sentAt) {
		this.lumens = lumens;
		this.sentAt = sentAt;
	}

	private Integer lumens;
	private SentAt sentAt;
	public Integer getLumens() {
		return lumens;
	}

	public LightMeasuredPayload setLumens(Integer lumens) {
		this.lumens = lumens;
		return this;
	}


	public SentAt getSentAt() {
		return sentAt;
	}

	public LightMeasuredPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"LightMeasuredPayload [\\"
		+ \\" lumens: \\" + lumens
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 4`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class SentAt {

	public SentAt () {
	}

	public SentAt (
		SubObject subObject) {
		this.subObject = subObject;
	}

	@JsonProperty(\\"propertySubobject\\")
	private SubObject subObject;
	public SubObject getSubObject() {
		return subObject;
	}

	public SentAt setSubObject(SubObject subObject) {
		this.subObject = subObject;
		return this;
	}

	public String toString() {
		return \\"SentAt [\\"
		+ \\" subObject: \\" + subObject
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 5`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class TurnOnOffPayload {

	public TurnOnOffPayload () {
	}

	public TurnOnOffPayload (
		Command command, 
		SentAt sentAt) {
		this.command = command;
		this.sentAt = sentAt;
	}

	private Command command;
	private SentAt sentAt;
	public Command getCommand() {
		return command;
	}

	public TurnOnOffPayload setCommand(Command command) {
		this.command = command;
		return this;
	}


	public static enum Command { on,off }
	public SentAt getSentAt() {
		return sentAt;
	}

	public TurnOnOffPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"TurnOnOffPayload [\\"
		+ \\" command: \\" + command
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 6`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class SubObject {

	public SubObject () {
	}

	public SubObject (
		String propertyA) {
		this.propertyA = propertyA;
	}

	private String propertyA;
	public String getPropertyA() {
		return propertyA;
	}

	public SubObject setPropertyA(String propertyA) {
		this.propertyA = propertyA;
		return this;
	}

	public String toString() {
		return \\"SubObject [\\"
		+ \\" propertyA: \\" + propertyA
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code using schemas that have $id set 1`] = `
"
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Consumer<DefaultMessageSchema> acmeRideshareRideRequested001Consumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

}
"
`;

exports[`template integration tests using the generator should generate code using schemas that have $id set 2`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class DefaultMessageSchema {

	public DefaultMessageSchema () {
	}

	public DefaultMessageSchema (
		java.math.BigDecimal avgMeterReading, 
		Integer windowDurationSec, 
		java.math.BigDecimal avgPassengerCount, 
		Integer windowRideCount, 
		String timestamp) {
		this.avgMeterReading = avgMeterReading;
		this.windowDurationSec = windowDurationSec;
		this.avgPassengerCount = avgPassengerCount;
		this.windowRideCount = windowRideCount;
		this.timestamp = timestamp;
	}

	@JsonProperty(\\"avg_meter_reading\\")
	private java.math.BigDecimal avgMeterReading;
	@JsonProperty(\\"window_duration_sec\\")
	private Integer windowDurationSec;
	@JsonProperty(\\"avg_passenger_count\\")
	private java.math.BigDecimal avgPassengerCount;
	@JsonProperty(\\"window_ride_count\\")
	private Integer windowRideCount;
	private String timestamp;
	public java.math.BigDecimal getAvgMeterReading() {
		return avgMeterReading;
	}

	public DefaultMessageSchema setAvgMeterReading(java.math.BigDecimal avgMeterReading) {
		this.avgMeterReading = avgMeterReading;
		return this;
	}


	public Integer getWindowDurationSec() {
		return windowDurationSec;
	}

	public DefaultMessageSchema setWindowDurationSec(Integer windowDurationSec) {
		this.windowDurationSec = windowDurationSec;
		return this;
	}


	public java.math.BigDecimal getAvgPassengerCount() {
		return avgPassengerCount;
	}

	public DefaultMessageSchema setAvgPassengerCount(java.math.BigDecimal avgPassengerCount) {
		this.avgPassengerCount = avgPassengerCount;
		return this;
	}


	public Integer getWindowRideCount() {
		return windowRideCount;
	}

	public DefaultMessageSchema setWindowRideCount(Integer windowRideCount) {
		this.windowRideCount = windowRideCount;
		return this;
	}


	public String getTimestamp() {
		return timestamp;
	}

	public DefaultMessageSchema setTimestamp(String timestamp) {
		this.timestamp = timestamp;
		return this;
	}

	public String toString() {
		return \\"DefaultMessageSchema [\\"
		+ \\" avgMeterReading: \\" + avgMeterReading
		+ \\" windowDurationSec: \\" + windowDurationSec
		+ \\" avgPassengerCount: \\" + avgPassengerCount
		+ \\" windowRideCount: \\" + windowRideCount
		+ \\" timestamp: \\" + timestamp
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate extra config when using the paramatersToHeaders parameter 1`] = `
"package com.acme;

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	@Bean
	public Consumer<Message<MySchema>> testLevel1MessageIdOperationConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	public void sendTestLevel1MessageIdOperation(
		MySchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate extra config when using the paramatersToHeaders parameter 2`] = `
"spring:
  cloud:
    function:
      configuration:
        testLevel1MessageIdOperationConsumer:
          input-header-mapping-expression:
            messageId: 'headers.solace_destination.getName.split(\\"/\\")[1]'
            operation: 'headers.solace_destination.getName.split(\\"/\\")[2]'
      definition: testLevel1MessageIdOperationSupplier;testLevel1MessageIdOperationConsumer
    stream:
      bindings:
        testLevel1MessageIdOperationSupplier-out-0:
          destination: 'testLevel1/{messageId}/{operation}'
        testLevel1MessageIdOperationConsumer-in-0:
          destination: testLevel1/*/*
      binders:
        solace-binder:
          type: solace
          environment:
            solace:
              java:
                host: testVmrUri
                msgVpn: vpnName
                clientUsername: user
                clientPassword: test
logging:
  level:
    root: info
    org:
      springframework: info

"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 1`] = `
"
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Consumer<Dossier> companyCustomerCompanyDebtorDebtorIdDossierDossierIdCreatedConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	@Bean
	public Consumer<Debtor> companyCustomerCompanyDebtorDebtorIdCreatedConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}



	public void sendCompanyCustomerCompanyDebtorCreate(
		Debtor payload, String customerCompany
		) {
		String topic = String.format(\\"Company/%s/debtor/create\\",
			customerCompany);
		streamBridge.send(topic, payload);
	}
	public void sendCompanyCustomerCompanyDebtorDebtorIdDossierCreate(
		Dossier payload, String customerCompany, String debtorId
		) {
		String topic = String.format(\\"Company/%s/debtor/%s/Dossier/create\\",
			customerCompany, debtorId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 2`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Dossier {

	public Dossier () {
	}

	public Dossier (
		java.math.BigDecimal premium, 
		java.math.BigDecimal appliedDiscount, 
		String productId, 
		Options[] options, 
		String id, 
		String clientId) {
		this.premium = premium;
		this.appliedDiscount = appliedDiscount;
		this.productId = productId;
		this.options = options;
		this.id = id;
		this.clientId = clientId;
	}

	private java.math.BigDecimal premium;
	@JsonProperty(\\"applied_discount\\")
	private java.math.BigDecimal appliedDiscount;
	@JsonProperty(\\"product_id\\")
	private String productId;
	private Options[] options;
	private String id;
	@JsonProperty(\\"client_id\\")
	private String clientId;
	public java.math.BigDecimal getPremium() {
		return premium;
	}

	public Dossier setPremium(java.math.BigDecimal premium) {
		this.premium = premium;
		return this;
	}


	public java.math.BigDecimal getAppliedDiscount() {
		return appliedDiscount;
	}

	public Dossier setAppliedDiscount(java.math.BigDecimal appliedDiscount) {
		this.appliedDiscount = appliedDiscount;
		return this;
	}


	public String getProductId() {
		return productId;
	}

	public Dossier setProductId(String productId) {
		this.productId = productId;
		return this;
	}


	public Options[] getOptions() {
		return options;
	}

	public Dossier setOptions(Options[] options) {
		this.options = options;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Options {

		public Options () {
		}
		public Options (
			String name, 
			String id) {
			this.name = name;
			this.id = id;
		}


		private String name;
		private String id;
		public String getName() {
			return name;
		}

		public Options setName(String name) {
			this.name = name;
			return this;
		}


		public String getId() {
			return id;
		}

		public Options setId(String id) {
			this.id = id;
			return this;
		}

		public String toString() {
			return \\"Options [\\"
			+ \\" name: \\" + name
			+ \\" id: \\" + id
			+ \\" ]\\";
		}
	}

	public String getId() {
		return id;
	}

	public Dossier setId(String id) {
		this.id = id;
		return this;
	}


	public String getClientId() {
		return clientId;
	}

	public Dossier setClientId(String clientId) {
		this.clientId = clientId;
		return this;
	}

	public String toString() {
		return \\"Dossier [\\"
		+ \\" premium: \\" + premium
		+ \\" appliedDiscount: \\" + appliedDiscount
		+ \\" productId: \\" + productId
		+ \\" options: \\" + options
		+ \\" id: \\" + id
		+ \\" clientId: \\" + clientId
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 3`] = `
"
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Debtor {

	public Debtor () {
	}

	public Debtor (
		Emails[] emails, 
		String birthdate, 
		Address address, 
		String lastName, 
		Phones[] phones, 
		String id, 
		String firstName, 
		BankAccount bankAccount) {
		this.emails = emails;
		this.birthdate = birthdate;
		this.address = address;
		this.lastName = lastName;
		this.phones = phones;
		this.id = id;
		this.firstName = firstName;
		this.bankAccount = bankAccount;
	}

	private Emails[] emails;
	private String birthdate;
	private Address address;
	@JsonProperty(\\"last_name\\")
	private String lastName;
	private Phones[] phones;
	private String id;
	@JsonProperty(\\"first_name\\")
	private String firstName;
	@JsonProperty(\\"bank_account\\")
	private BankAccount bankAccount;
	public Emails[] getEmails() {
		return emails;
	}

	public Debtor setEmails(Emails[] emails) {
		this.emails = emails;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Emails {

		public Emails () {
		}
		public Emails (
			String type, 
			String email, 
			Boolean preferred) {
			this.type = type;
			this.email = email;
			this.preferred = preferred;
		}


		private String type;
		private String email;
		private Boolean preferred;
		public String getType() {
			return type;
		}

		public Emails setType(String type) {
			this.type = type;
			return this;
		}


		public String getEmail() {
			return email;
		}

		public Emails setEmail(String email) {
			this.email = email;
			return this;
		}


		public Boolean getPreferred() {
			return preferred;
		}

		public Emails setPreferred(Boolean preferred) {
			this.preferred = preferred;
			return this;
		}

		public String toString() {
			return \\"Emails [\\"
			+ \\" type: \\" + type
			+ \\" email: \\" + email
			+ \\" preferred: \\" + preferred
			+ \\" ]\\";
		}
	}

	public String getBirthdate() {
		return birthdate;
	}

	public Debtor setBirthdate(String birthdate) {
		this.birthdate = birthdate;
		return this;
	}


	public Address getAddress() {
		return address;
	}

	public Debtor setAddress(Address address) {
		this.address = address;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Address {

		public Address () {
		}

		public Address (
			String countryCode, 
			String city, 
			String street, 
			String postalCode) {
			this.countryCode = countryCode;
			this.city = city;
			this.street = street;
			this.postalCode = postalCode;
		}

		@JsonProperty(\\"country_code\\")
		private String countryCode;
		private String city;
		private String street;
		@JsonProperty(\\"postal_code\\")
		private String postalCode;
		public String getCountryCode() {
			return countryCode;
		}

		public Address setCountryCode(String countryCode) {
			this.countryCode = countryCode;
			return this;
		}


		public String getCity() {
			return city;
		}

		public Address setCity(String city) {
			this.city = city;
			return this;
		}


		public String getStreet() {
			return street;
		}

		public Address setStreet(String street) {
			this.street = street;
			return this;
		}


		public String getPostalCode() {
			return postalCode;
		}

		public Address setPostalCode(String postalCode) {
			this.postalCode = postalCode;
			return this;
		}

		public String toString() {
			return \\"Address [\\"
			+ \\" countryCode: \\" + countryCode
			+ \\" city: \\" + city
			+ \\" street: \\" + street
			+ \\" postalCode: \\" + postalCode
			+ \\" ]\\";
		}
	}

	public String getLastName() {
		return lastName;
	}

	public Debtor setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}


	public Phones[] getPhones() {
		return phones;
	}

	public Debtor setPhones(Phones[] phones) {
		this.phones = phones;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Phones {

		public Phones () {
		}
		public Phones (
			String phone, 
			String type, 
			Boolean preferred) {
			this.phone = phone;
			this.type = type;
			this.preferred = preferred;
		}


		private String phone;
		private String type;
		private Boolean preferred;
		public String getPhone() {
			return phone;
		}

		public Phones setPhone(String phone) {
			this.phone = phone;
			return this;
		}


		public String getType() {
			return type;
		}

		public Phones setType(String type) {
			this.type = type;
			return this;
		}


		public Boolean getPreferred() {
			return preferred;
		}

		public Phones setPreferred(Boolean preferred) {
			this.preferred = preferred;
			return this;
		}

		public String toString() {
			return \\"Phones [\\"
			+ \\" phone: \\" + phone
			+ \\" type: \\" + type
			+ \\" preferred: \\" + preferred
			+ \\" ]\\";
		}
	}

	public String getId() {
		return id;
	}

	public Debtor setId(String id) {
		this.id = id;
		return this;
	}


	public String getFirstName() {
		return firstName;
	}

	public Debtor setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}


	public BankAccount getBankAccount() {
		return bankAccount;
	}

	public Debtor setBankAccount(BankAccount bankAccount) {
		this.bankAccount = bankAccount;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class BankAccount {

		public BankAccount () {
		}

		public BankAccount (
			String iban, 
			String bic) {
			this.iban = iban;
			this.bic = bic;
		}

		@JsonProperty(\\"IBAN\\")
		private String iban;
		@JsonProperty(\\"BIC\\")
		private String bic;
		public String getIban() {
			return iban;
		}

		public BankAccount setIban(String iban) {
			this.iban = iban;
			return this;
		}


		public String getBic() {
			return bic;
		}

		public BankAccount setBic(String bic) {
			this.bic = bic;
			return this;
		}

		public String toString() {
			return \\"BankAccount [\\"
			+ \\" iban: \\" + iban
			+ \\" bic: \\" + bic
			+ \\" ]\\";
		}
	}
	public String toString() {
		return \\"Debtor [\\"
		+ \\" emails: \\" + emails
		+ \\" birthdate: \\" + birthdate
		+ \\" address: \\" + address
		+ \\" lastName: \\" + lastName
		+ \\" phones: \\" + phones
		+ \\" id: \\" + id
		+ \\" firstName: \\" + firstName
		+ \\" bankAccount: \\" + bankAccount
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should return payload when using x-scs-function-name instead of logging the message 1`] = `
"
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	// This is a consumer that calls a send method, instead of a function, because it has a dynamic channel and we need streamBridge.
	@Bean
	public Consumer<MySchema> sameFunctionName() {
		return data -> {
			// Add business logic here.
			logger.info(data.toString());
			String messageId = \\"string\\";
			String operation = \\"string\\";
			MyOtherSchema payload = new MyOtherSchema();
			sendSameFunctionName(payload, messageId, operation);
		};
	}

	public void sendSameFunctionName(
		MyOtherSchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;
